# EBNF Grammar for JAEN Abstract Syntax (JAS) files
# Compile grammar into parser using:  $ python -m grako jas.ebnf -o jas_parse.py

@@grammar :: jas

jas = head:{!(name define) !begin any}    # Ignore anything before meta
    metas:[meta]                          # Administrative information - key:value pairs
    types:{type}+ $                       # Datatype definitions
    ;
meta = begin {!end [[WS] NL] @:KVal} end ;
begin = "/*" ;
end = "*/" ;
KVal = key:name ":" val:{Val}+ ;          # Whitespace is meaningful within meta definitions
Val = WS @:/.*/ NL ;
WS = /\s+/ ;
NL = /(\n|\r)+/ ;

type = name:name define type:name [topts:topts] [td1:cmt] [f:fields] ;
any =  /(\w|_|-)+|\s+|./ ;
name = /(\w|_|-)+/ ;
qname = /(\w+:)?(\w|_|-)+/ ;
int = /\d+/ ;
define = "::=" ;
cmt = "--" /\s*/ @:/.*/ ;
str = '"' @:{ !'"' /./ } '"' ;
fields = "{" [td2:cmt] fields:",".{ field } "}" ;
field = ( [fd1:cmt] name:qname tag:etag [fd2:cmt] )                                   # Enumerated value, or
      | ( [fd1:cmt] name:(qname|"*") [tag:ftag] type:qname [fopts:fopts] [fd2:cmt] )  #  structured datatype field
      ;
etag = "(" @:int ")" ;
ftag = "[" @:int "]" ;
pattern = "(" @:("PATTERN" str) ")" ;
topts = { pattern                # Datatype options
      }+ ;
fopts = { "OPTIONAL"             # Field options
      | "MIN" int
      | "MAX" int
      | ".&" name
      }+ ;
